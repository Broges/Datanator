service: group-2

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

provider:
  name: aws
  stage: dev
  region: eu-west-1

package:
  individually: true

functions:
  Team-2-Extract:
    runtime: python3.8
    handler: lambda_function.lambda_handler
    module: extract
    include:
      - extract
    events:
      - s3:
          bucket: cafe-transactions-group-2
          event: s3:ObjectCreated:Put
          rules:
            - suffix: .csv
          existing: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - sqs:SendMessage
        Resource: !GetAtt Team2extracttotranform.Arn
      - Effect: 'Allow'
        Action:
          - s3:GetObject
          - s3:ListBucket
        Resource:
          - arn:aws:s3:::cafe-transactions-group-2
          - arn:aws:s3:::cafe-transactions-group-2/*

  Team2-Transform:
    runtime: python3.8
    handler: lambda_function.lambda_handler
    module: transform
    include:
      - transform
    events:
      - sqs: arn:aws:sqs:eu-west-1:579154747729:Team2extracttotranform
    iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
      - Effect: 'Allow'
        Action:
          - sqs:ReceiveMessage
          - sqs:SendMessage
        # Resource: # 
        #   - arn:aws:sqs:eu-west-1:579154747729:Team2extracttotranform
        #   - !GetAtt Team2transformtoload.Arn
        Resource: # 
          - arn:aws:sqs:eu-west-1:579154747729:Team2extracttotranform

  Team-2-Load-Lambda:
    runtime: python3.8
    handler: handler.lambda_handler
    module: load
    events:
      - sqs: arn:aws:sqs:eu-west-1:579154747729:Team2transformtoload
    enviroment:
      DB_CLUSTER: 'bir1-cluster'
      DB_HOST: '10.0.1.223' 
      DB_NAME: 'dev' 
      DB_PORT: '5439'
      DB_USER: 'awsuser'

resources:
  Resources:
    Team2extracttotranform:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: Team2extracttotranform

    Team2tranformtoload:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: Team2tranformtoload

    # cafe-transactions-group-2:
    #   Type: "AWS::S3::Bucket"
    #   Properties:
    #      BucketName: cafe-transactions-group-2

    # ExtractDestination:
    #   Type: "AWS::Lambda::EventInvokeConfig"
    #   Properties:
    #     FunctionName: !Ref TeamDash2DashExtractDashLambdaFunction
    #     DestinationConfig:
    #       OnSuccess:
    #         Destination: !GetAtt Team2extracttotranform.Arn
    #     Qualifier: "$LATEST"
    
    # TransformDestination:
    #   Type: "AWS::Lambda::EventInvokeConfig"
    #   Properties:
    #     FunctionName: !Ref Team2DashTransformDashLambdaFunction
    #     DestinationConfig:
    #       OnSuccess:
    #         Destination: !GetAtt Team2tranformtoload.Arn
    #     Qualifier: "$LATEST"

    # Bucket:
    #   Type: AWS::S3::Bucket
    #   DependsOn:
    #     - ProcessingLambdaPermission
    #   Properties:
    #     BucketName: !Ref BucketName
    #     NotificationConfiguration:
    #       LambdaConfigurations:
    #         - Event: s3:ObjectCreated:*
    #           Function: !GetAtt ProcessingLambdaFunction.Arn
    #           Filter:
    #             S3Key:
    #               Rules:
    #               - Name: suffix
    #                 Value: .txt

    # ProcessingLambdaPermission:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     Action: 'lambda:InvokeFunction'
    #     FunctionName: !Ref ProcessingLambdaFunction
    #     Principal: s3.amazonaws.com
    #     SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
    #     SourceAccount: !Ref AWS::AccountId